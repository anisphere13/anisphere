// üõ†Ô∏è Fix: utilise `contains` pour les v√©rifications de connexion WiFi/mobile.
// Provider utilisateur pour AniSph√®re.
// G√®re l‚Äô√©tat utilisateur, les connexions (email, Google, Apple),
// la synchronisation Firebase/Hive et les notifications UI.
// Copilot Prompt : "UserProvider g√®re l‚Äôutilisateur, la connexion, et d√©clenche la synchro IA cloud si premium"


import 'package:flutter/material.dart';
import 'package:connectivity_plus/connectivity_plus.dart';

import '../models/user_model.dart';
import '../services/user_service.dart';
import '../services/auth_service.dart';
import 'package:anisphere/modules/noyau/logic/ia_master.dart'; // üëà IA ajout√©e

class UserProvider with ChangeNotifier {
  final UserService _userService;
  final AuthService _authService;

  UserModel? _user;
  UserModel? get user => _user;

  UserProvider(this._userService, this._authService);

  /// Met √† jour l'utilisateur actuel et notifie les listeners.
  void setUser(UserModel user) {
    _user = user;
    notifyListeners();
  }

  /// üì¶ Chargement local ou distant
  Future<void> loadUser() async {
    try {
      await _userService.init(); // Init Hive
      final currentUser = _authService.currentUser;

      if (currentUser != null) {
        _user = await _fetchUser(currentUser.uid);
        debugPrint('[loadUser] Chargement utilisateur depuis Hive : $_user');
        _logAndNotifyUserState(_user, "charg√©");
        if (_user == null) {
          notifyListeners();
        }

        // ‚úÖ Synchronisation IA si premium
        if (_user?.iaPremium == true) {
          await IAMaster.instance.syncCloudIA(_user!.id);
        }
      } else {
        debugPrint("‚ö†Ô∏è Aucun utilisateur connect√©.");
        notifyListeners();
      }
    } catch (e) {
      _logError("loadUser", e);
    }
  }

  /// üîÅ Mise √† jour globale
  Future<void> updateUser(UserModel user) async {
    try {
      await _userService.updateUser(user);
      _user = user;
      notifyListeners();
      debugPrint("‚úÖ Utilisateur mis √† jour : ${user.email}");

      // ‚úÖ Synchronisation IA si premium
      if (user.iaPremium) {
        await IAMaster.instance.syncCloudIA(user.id);
      }
    } catch (e) {
      _logError("updateUser", e);
    }
  }

  /// üîê Connexion par email
  Future<bool> signInWithEmail(String email, String password) async {
    return await _signIn(
        () => _authService.signInWithEmail(email, password), "email");
  }

  /// üÜï Inscription
  Future<bool> signUp({
    required String name,
    required String email,
    required String password,
    required String phone,
    required String profession,
  }) async {
    return await _signIn(
      () => _authService.signUpWithEmail(
        name: name,
        email: email,
        password: password,
        phone: phone,
        profession: profession,
      ),
      "inscription",
    );
  }

  /// üîê Connexion Google
  Future<bool> signInWithGoogle() async {
    return await _signIn(() => _authService.signInWithGoogle(), "Google");
  }

  /// üçè Connexion Apple
  Future<bool> signInWithApple() async {
    return await _signIn(() => _authService.signInWithApple(), "Apple");
  }

  /// üîì D√©connexion
  Future<void> signOut() async {
    try {
      await _userService.init(); // Hive ready
      if (_user != null) {
        await _userService.deleteUserLocally();
      }

      final connectivity = await Connectivity().checkConnectivity();
      if (connectivity.contains(ConnectivityResult.wifi) ||
          connectivity.contains(ConnectivityResult.mobile)) {
        await _authService.signOut();
        debugPrint("‚úÖ D√©connexion Firebase !");
      } else {
        debugPrint("‚ö†Ô∏è D√©connexion locale (pas de r√©seau).");
      }

      _user = null;
      notifyListeners();
      debugPrint("‚úÖ D√©connexion r√©ussie !");
    } catch (e) {
      _logError("signOut", e);
    }
  }

  /// M√©thode priv√©e pour r√©cup√©rer un utilisateur
  Future<UserModel?> _fetchUser(String uid) async {
    return _userService.getUserFromHive() ??
        await _userService.getUserFromFirebase(uid);
  }

  /// M√©thode priv√©e pour g√©rer les connexions
  Future<bool> _signIn(
      Future<UserModel?> Function() signInMethod, String method) async {
    try {
      final user = await signInMethod();
      if (user != null) {
        _user = user;
        notifyListeners();
        debugPrint("‚úÖ Connexion $method : ${user.email}");

        // ‚úÖ Synchronisation IA si premium
        if (user.iaPremium) {
          await IAMaster.instance.syncCloudIA(user.id);
        }

        return true;
      }
    } catch (e) {
      _logError("Connexion $method", e);
    }
    return false;
  }

  /// M√©thode priv√©e pour logguer et notifier l'√©tat utilisateur
  void _logAndNotifyUserState(UserModel? user, String action) {
    if (user != null) {
      assert(() {
        debugPrint("‚úÖ Utilisateur $action : ${user.email}");
        return true;
      }());
      notifyListeners();
    } else {
      assert(() {
        debugPrint("‚ö†Ô∏è Aucun utilisateur trouv√©.");
        return true;
      }());
    }
  }

  /// M√©thode priv√©e pour logguer les erreurs
  void _logError(String context, Object error) {
    assert(() {
      debugPrint("‚ùå Erreur $context : $error");
      return true;
    }());
  }

  /// üîç Acc√®s au service utilisateur (ex: pour IAContextProvider)
  UserService get userService => _userService;

  /// üîê Acc√®s au service d'authentification
  AuthService get authService => _authService;
}
