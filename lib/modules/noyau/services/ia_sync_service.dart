// Copilot Prompt : IASyncService AniSph√®re.
// D√©tecte automatiquement les √©v√©nements importants (ajout animal, update, module actif),
// V√©rifie si l‚Äôutilisateur est premium et d√©clenche la synchronisation IA cloud.
// Optimis√© sans co√ªt : batch, diff√©r√©, sans doublon, sans surcharge.
// Utilise CloudSyncService en arri√®re-plan. Journalise localement via IALogger.


import 'package:flutter/foundation.dart';

import '../models/animal_model.dart';
import '../models/user_model.dart';
import '../logic/ia_flag.dart';
import '../logic/ia_logger.dart';
import '../logic/ia_channel.dart'; // <-- Import l'enum ici
import 'cloud_sync_service.dart';

class IASyncService {
  static final IASyncService instance = IASyncService._internal();

  final CloudSyncService _cloudSync = CloudSyncService();
  final List<String> _syncedAnimalIds = [];

  IASyncService._internal();

  /// üîÅ Synchro automatique √† l‚Äôajout ou modification d‚Äôun animal
  Future<void> syncAnimal(AnimalModel animal, UserModel user) async {
    if (!user.iaPremium || IAFlag.offlineOnly) return;

    try {
      if (_syncedAnimalIds.contains(animal.id)) return;

      await _cloudSync.pushAnimalData(animal);
      _syncedAnimalIds.add(animal.id);
      await IALogger.log(
        channel: IAChannel.sync,
        message: "Animal ${animal.name} synchronis√© avec le cloud IA.",
      );
    } catch (e) {
      _logError("Erreur de sync animal ${animal.name}", e);
    }
  }

  /// üîÅ Synchro automatique du profil utilisateur (au login ou changement)
  Future<void> syncUser(UserModel user) async {
    if (!user.iaPremium || IAFlag.offlineOnly) return;

    try {
      await _cloudSync.pushUserData(user);
      await IALogger.log(
        channel: IAChannel.sync,
        message: "Utilisateur ${user.email} synchronis√© avec le cloud IA.",
      );
    } catch (e) {
      _logError("Erreur de sync utilisateur ${user.email}", e);
    }
  }

  /// üîÅ Synchro de module sp√©cifique
  Future<void> syncModuleData({
    required String moduleName,
    required Map<String, dynamic> data,
    required UserModel user,
  }) async {
    if (!user.iaPremium || IAFlag.offlineOnly) return;

    try {
      await _cloudSync.pushModuleData(moduleName, data);
      await IALogger.log(
        channel: IAChannel.sync,
        message: "Donn√©es module $moduleName synchronis√©es avec le cloud IA.",
      );
    } catch (e) {
      _logError("Erreur de sync module $moduleName", e);
    }
  }

  /// üîÅ Synchro de feedback IA locale (suggestions, r√®gles, etc.)
  Future<void> syncFeedback(
      Map<String, dynamic> feedback, UserModel user) async {
    if (!user.iaPremium || IAFlag.offlineOnly) return;

    try {
      await _cloudSync.pushIAFeedback(feedback);
      await IALogger.log(
        channel: IAChannel.sync,
        message: "Feedback IA locale envoy√© avec succ√®s.",
      );
    } catch (e) {
      _logError("Erreur feedback IA", e);
    }
  }

  /// Log d'erreur typ√©, visible uniquement en debug.
  void _logError(String prefix, dynamic error) {
    assert(() {
      debugPrint("‚ùå $prefix : $error");
      return true;
    }());
  }
}
