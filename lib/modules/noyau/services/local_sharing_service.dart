// Copilot Prompt : Service de partage local (Bluetooth/Wi-Fi Direct/NFC/QR) pour AniSph√®re.
// D√©tecte automatiquement les modes disponibles et assure la transmission locale de fichiers.
// Fournit √©galement une m√©thode de partage via QR pour passer un lien ou identifiant.
library;

import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:nearby_connections/nearby_connections.dart';

import 'qr_service.dart';

class LocalSharingService {
  final FlutterBluePlus _bluetooth;
  final NearbyService _nearby;

  LocalSharingService({
    FlutterBluePlus? bluetooth,
    NearbyService? nearby,
  })  : _bluetooth = bluetooth ?? FlutterBluePlus.instance,
        _nearby = nearby ?? NearbyService();

  /// üì§ Envoie un fichier vers un appareil √† proximit√©.
  /// Tente Wi‚ÄëFi Direct via `nearby_connections`, puis Bluetooth.
  Future<bool> sendFileNearby(File file) async {
    if (await _sendViaNearby(file)) return true;
    if (await _sendViaBluetooth(file)) return true;
    debugPrint('‚ùå [LocalShare] Aucun mode disponible pour envoyer ${file.path}');
    return false;
  }

  /// üì• Attend la r√©ception d‚Äôun fichier proche.
  /// Retourne le fichier stock√© localement ou `null` si aucun transfert r√©ussi.
  Future<File?> receiveFileNearby() async {
    final nearby = await _receiveViaNearby();
    if (nearby != null) return nearby;
    return await _receiveViaBluetooth();
  }

  /// üì± G√©n√®re un QR code pour partager un texte/lien (fallback universel).
  Widget shareViaQR(String data, {double size = 200}) {
    return QRService.generateQRCode(data, size: size);
  }

  // --- M√©thodes internes ---
  Future<bool> _sendViaNearby(File file) async {
    try {
      final hasPermission = await _nearby.checkLocationPermission();
      if (!hasPermission) return false;
      await _nearby.startAdvertising('AniSphere', Strategy.P2P_CLUSTER);
      // Simplifi√© : envoie direct sans gestion avanc√©e de connexion
      await _nearby.sendFilePath('AniSphere', file.path);
      await _nearby.stopAdvertising();
      debugPrint('üì° [LocalShare] Fichier envoy√© via Nearby');
      return true;
    } catch (e) {
      debugPrint('‚ùå [LocalShare] Nearby √©chec : $e');
      return false;
    }
  }

  Future<bool> _sendViaBluetooth(File file) async {
    try {
      final isOn = await _bluetooth.isOn;
      if (!isOn) return false;
      // Simplifi√© : broadcast basique du fichier
      // Un vrai √©change n√©cessiterait un service GATT sp√©cifique
      debugPrint('üì∂ [LocalShare] Envoi Bluetooth non impl√©ment√©');
      return false;
    } catch (e) {
      debugPrint('‚ùå [LocalShare] Bluetooth √©chec : $e');
      return false;
    }
  }

  Future<File?> _receiveViaNearby() async {
    try {
      final hasPermission = await _nearby.checkLocationPermission();
      if (!hasPermission) return null;
      await _nearby.startBrowsingForPeers();
      // Simplifi√© : r√©cup√©ration du premier fichier re√ßu
      final file = await _nearby.receiveFile();
      await _nearby.stopBrowsingForPeers();
      if (file != null) {
        debugPrint('üì° [LocalShare] Fichier re√ßu via Nearby');
        return File(file.path);
      }
    } catch (e) {
      debugPrint('‚ùå [LocalShare] R√©ception Nearby √©chec : $e');
    }
    return null;
  }

  Future<File?> _receiveViaBluetooth() async {
    try {
      final isOn = await _bluetooth.isOn;
      if (!isOn) return null;
      debugPrint('üì∂ [LocalShare] R√©ception Bluetooth non impl√©ment√©e');
    } catch (e) {
      debugPrint('‚ùå [LocalShare] R√©ception Bluetooth √©chec : $e');
    }
    return null;
  }
}
