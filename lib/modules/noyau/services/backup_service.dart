/// Copilot Prompt : BackupService complet pour AniSph√®re.
/// Sauvegarde automatiquement les donn√©es Hive vers Firebase.
/// G√®re √©galement la restauration des donn√©es sauvegard√©es.
/// Compatible avec IAContext, AnimalService, UserService.
/// Optimis√© offline-first, s√©curis√©, gestion erreurs propre.

library;

import 'package:flutter/foundation.dart';
import 'package:anisphere/modules/noyau/services/firebase_service.dart';
import 'package:anisphere/modules/noyau/services/user_service.dart';
import 'package:anisphere/modules/noyau/services/animal_service.dart';
import 'package:anisphere/modules/noyau/models/animal_model.dart';

class BackupService {
  final UserService userService;
  final AnimalService animalService;
  final FirebaseService firebaseService;

  BackupService({
    required this.userService,
    required this.animalService,
    FirebaseService? firebaseService,
  }) : firebaseService = firebaseService ?? FirebaseService();

  /// üíæ Sauvegarde compl√®te vers Firebase
  Future<bool> performBackup() async {
    try {
      // Correction ici : on attend bien l'utilisateur local (async)
      final user = await userService.getLocalUser();
      final animals = await animalService.getAllAnimals();

      if (user == null) {
        _log("‚ö†Ô∏è Aucun utilisateur local trouv√©, sauvegarde impossible.");
        return false;
      }

      await firebaseService.saveUser(user);
      for (AnimalModel animal in animals) {
        await firebaseService.saveAnimal(animal);
      }

      _log("‚úÖ Sauvegarde compl√®te effectu√©e avec succ√®s.");
      return true;
    } catch (e) {
      _log("‚ùå Erreur lors de la sauvegarde : $e");
      return false;
    }
  }

  /// ‚ôªÔ∏è Restauration compl√®te depuis Firebase vers Hive
  Future<bool> restoreBackup(String userId) async {
    try {
      final user = await firebaseService.getUser(userId);
      if (user == null) {
        _log("‚ö†Ô∏è Aucun utilisateur trouv√© dans la sauvegarde cloud.");
        return false;
      }

      await userService.saveUserLocally(user);
      // On suppose que la m√©thode existe dans FirebaseService
      final animals = await firebaseService.getAllAnimals(ownerId: userId);
      for (AnimalModel animal in animals) {
        await animalService.updateLocalAnimal(animal);
      }

      _log("‚úÖ Restauration compl√®te effectu√©e avec succ√®s.");
      return true;
    } catch (e) {
      _log("‚ùå Erreur lors de la restauration : $e");
      return false;
    }
  }

  /// üóëÔ∏è Supprime toutes les donn√©es sauvegard√©es sur Firebase
  Future<bool> deleteBackup(String userId) async {
    try {
      final animals = await firebaseService.getAllAnimals(ownerId: userId);
      for (AnimalModel animal in animals) {
        await firebaseService.deleteAnimal(animal.id);
      }
      await firebaseService.deleteUser(userId);

      _log("‚úÖ Sauvegarde supprim√©e avec succ√®s.");
      return true;
    } catch (e) {
      _log("‚ùå Erreur lors de la suppression de la sauvegarde : $e");
      return false;
    }
  }

  /// üïó Derni√®re sauvegarde effectu√©e (utile pour l'UI)
  Future<DateTime?> getLastBackupDate(String userId) async {
    try {
      final user = await firebaseService.getUser(userId);
      return user?.updatedAt;
    } catch (e) {
      _log("‚ùå Erreur r√©cup√©ration date derni√®re sauvegarde : $e");
      return null;
    }
  }

  /// Log typ√©, visible uniquement en debug.
  void _log(String message) {
    assert(() {
      debugPrint("[BackupService] $message");
      return true;
    }());
  }
}
