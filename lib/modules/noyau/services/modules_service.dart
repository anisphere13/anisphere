/// Copilot Prompt : Service de gestion des modules AniSphÃ¨re.
/// GÃ¨re lâ€™Ã©tat des modules (activÃ©, premium, disponible).
/// Persiste les statuts avec LocalStorageService.
/// UtilisÃ© par ModulesScreen et IA pour dÃ©terminer les accÃ¨s.

library;

import 'package:anisphere/modules/noyau/services/local_storage_service.dart';

class ModulesService {
  static const List<String> allModules = [
    "SantÃ©",
    "Ã‰ducation",
    "Dressage",
    // ðŸ”½ Ajouter ici les modules futurs
  ];

  /// ðŸ”„ RÃ©cupÃ¨re le statut dâ€™un module : actif, premium, disponible
  static String getStatus(String moduleName) {
    return LocalStorageService.get("module_status_$moduleName", defaultValue: "disponible");
  }

  /// âœ… Active un module (accessible immÃ©diatement)
  static Future<void> activate(String moduleName) async {
    await LocalStorageService.set("module_status_$moduleName", "actif");
  }

  /// ðŸ’Ž Marque un module comme premium (IA avancÃ©e ou payante)
  static Future<void> markPremium(String moduleName) async {
    await LocalStorageService.set("module_status_$moduleName", "premium");
  }

  /// ðŸ§¼ RÃ©initialise tous les statuts (utile en debug ou rÃ©initialisation)
  static Future<void> resetAllStatuses() async {
    for (final module in allModules) {
      await LocalStorageService.set("module_status_$module", "disponible");
    }
  }

  /// ðŸ“¦ Renvoie une map complÃ¨te des modules avec leur statut
  static Map<String, String> getAllModulesStatus() {
    final Map<String, String> result = {};
    for (final module in allModules) {
      result[module] = getStatus(module);
    }
    return result;
  }

  /// ðŸ§³ MÃ©thode fictive pour compatibilitÃ© avec IAExecutor
  Future<void> getAllStatuses() async {
    // Retourne un statut global, Ã  utiliser pour IAExecutor
    return getAllModulesStatus();
  }

  /// ðŸ’¡ MÃ©thode fictive pour compatibilitÃ© avec IAExecutor
  Future<void> setActive(String moduleName) async {
    await activate(moduleName);
  }
}
