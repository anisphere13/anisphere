// Copilot Prompt : Service de gestion des modules AniSph√®re.
// G√®re l‚Äô√©tat des modules (activ√©, premium, disponible).
// Persiste les statuts avec LocalStorageService.
// Utilis√© par ModulesScreen et IA pour d√©terminer les acc√®s.

library;

import 'package:anisphere/modules/noyau/services/local_storage_service.dart';
import 'package:anisphere/modules/noyau/models/module_model.dart';

class ModulesService {
  static const List<ModuleModel> availableModules = [
    ModuleModel(
      id: 'sante',
      name: 'Sant√©',
      description: 'Suivi sant√© et bien-√™tre',
      category: 'Sant√©',
      icon: 'ü©∫',
    ),
    ModuleModel(
      id: 'education',
      name: '√âducation',
      description: 'Apprentissage et conseils',
      category: '√âducation',
      icon: 'üìö',
    ),
    ModuleModel(
      id: 'dressage',
      name: 'Dressage',
      description: 'Entra√Ænement avanc√©',
      category: 'Dressage',
      icon: 'üéØ',
      premium: true,
    ),
    // üîΩ Ajouter ici les modules futurs
  ];

  /// üìö Association statique des cat√©gories vers leurs modules.
  static const Map<String, List<Map<String, String>>> _modulesByCategory = {
    'Sant√©': [
      {
        'id': 'sante',
        'name': 'Sant√©',
        'description': 'Suivi des vaccins, visites, soins m√©dicaux.',
      },
    ],
    '√âducation': [
      {
        'id': 'education',
        'name': '√âducation',
        'description':
            'Programmes √©ducatifs IA et routines personnalis√©es.',
      },
    ],
    'Dressage': [
      {
        'id': 'dressage',
        'name': 'Dressage',
        'description': 'Entra√Ænement avanc√©, objectifs, IA comparative.',
      },
    ],
    // üîΩ Ajouter ici d'autres cat√©gories si n√©cessaire
  };

  /// üîÑ R√©cup√®re le statut d‚Äôun module : actif, premium, disponible
  static String getStatus(String moduleId) {
    return LocalStorageService.get("module_status_$moduleId",
        defaultValue: "disponible");
  }

  /// ‚úÖ Active un module (accessible imm√©diatement)
  static Future<void> activate(String moduleId) async {
    await LocalStorageService.set("module_status_$moduleId", "actif");
  }

  /// üíé Marque un module comme premium (IA avanc√©e ou payante)
  static Future<void> markPremium(String moduleId) async {
    await LocalStorageService.set("module_status_$moduleId", "premium");
  }

  /// üßº R√©initialise tous les statuts (utile en debug ou r√©initialisation)
  static Future<void> resetAllStatuses() async {
    for (final module in allModules) {
      await LocalStorageService.set("module_status_$module", "disponible");
    }
  }

  /// üì¶ Renvoie une map compl√®te des modules avec leur statut
  static Future<Map<String, String>> getAllModulesStatus() async {
    final Map<String, String> result = {};
    for (final module in allModules) {
      result[module] = getStatus(module);
    }
    return result;
  }

  /// ‚úÖ Rend compatible IAExecutor : d√©sactivation des modules inactifs
  Future<void> deactivateUnusedModules() async {
    for (final module in allModules) {
      final status = getStatus(module);
      if (status != "actif") {
        // Exemple : on pourrait forcer une action, log ou nettoyage
      }
    }
    // Rien √† faire ici pour l‚Äôinstant, m√©thode factice pour compatibilit√© IA
  }

  /// üì¶ M√©thode utilis√©e dans IAExecutor (correctif type)
  Future<Map<String, String>> getAllStatuses() async {
    return getAllModulesStatus();
  }

  /// M√©thode compatible IA pour activation rapide
  Future<void> setActive(String moduleName) async {
    await activate(moduleName);
  }

  /// üîç R√©cup√®re les modules d'une cat√©gorie donn√©e.
  Future<List<Map<String, String>>> getModulesByCategory(String category) async {
    return _modulesByCategory[category] ?? [];
  }
}
