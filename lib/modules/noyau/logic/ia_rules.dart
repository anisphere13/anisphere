/// R√®gles intelligentes AniSph√®re.
/// Contient des r√®gles m√©tiers IA : seuils d‚Äôalerte, d√©tections comportementales,
/// logiques de notifications ou d√©clencheurs IA.
/// S‚Äôappuie sur les donn√©es locales et le contexte utilisateur.

import 'package:flutter/foundation.dart';
import '../models/animal_model.dart';

class IARules {
  /// üêæ D√©tection d‚Äôanimaux sans interaction r√©cente
  static bool isAnimalInactive(AnimalModel animal,
      {Duration threshold = const Duration(days: 14)}) {
    final now = DateTime.now();
    final delta = now.difference(animal.updatedAt);
    return delta > threshold;
  }

  /// ‚ö†Ô∏è V√©rification de donn√©es manquantes critiques
  static bool isAnimalProfileIncomplete(AnimalModel animal) {
    return animal.name.isEmpty ||
        animal.species.isEmpty ||
        animal.ownerId.isEmpty;
  }

  /// üîî D√©clenche une suggestion si aucun animal
  static bool shouldSuggestAnimalOnboarding(List<AnimalModel> animals) {
    return animals.isEmpty;
  }

  /// üìä D√©tection d‚Äôanomalie basique sur comportement (exemple simplifi√©)
  static bool isWeightSuspicious(double previousWeight, double currentWeight) {
    final diff = (currentWeight - previousWeight).abs();
    final percent = (diff / previousWeight) * 100;
    return percent > 20; // ex : variation de +20% consid√©r√©e anormale
  }

  /// üß† Retourne des r√®gles UX intelligentes
  static String getSuggestedAction(List<AnimalModel> animals) {
    if (animals.isEmpty) return "add_first_animal";
    final inactive = animals.where((a) => isAnimalInactive(a)).toList();
    if (inactive.isNotEmpty) return "check_inactive_animals";
    return "dashboard_default";
  }

  /// üß† D√©cision UX IA selon le contexte
  static String decideUXMode({
    required bool isFirstLaunch,
    required bool isOffline,
    required bool hasAnimals,
  }) {
    if (isOffline) return "offline_mode";
    if (isFirstLaunch) return "onboarding_mode";
    if (!hasAnimals) return "empty_state";
    return "normal_mode";
  }
}
